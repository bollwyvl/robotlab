parameters:
  name: Linux
  vmImage: ubuntu-16.04
  activate: ""

jobs:
  - job: ${{ parameters.name }}
    dependsOn:
      - lab
      - noarch
    condition: succeeded()
    pool:
      vmImage: ${{ parameters.vmImage }}

    steps:
      - ${{ if eq(parameters.name, 'Linux') }}:
        - bash: echo "##vso[task.prependpath]$CONDA/bin"
          displayName: conda $PATH

      - ${{ if eq(parameters.name, 'MacOSX') }}:
        - bash: echo "##vso[task.prependpath]$CONDA/bin"
          displayName: conda $PATH

        - bash: sudo chown -R $USER $CONDA
          displayName: own conda

      - ${{ if eq(parameters.name, 'Windows') }}:
        - powershell: Write-Host "##vso[task.prependpath]$env:CONDA\Scripts"
          displayName: conda %PATH%

      - script: conda env update -n base --file environment.yml --quiet
        displayName: install full build/test environment

      - task: DownloadPipelineArtifact@0
        inputs:
          artifactName: noarch conda packages
          targetPath: _artifacts/conda-bld/noarch
        displayName: restore noarch packages

      - task: DownloadPipelineArtifact@0
        inputs:
          artifactName: robotlab app_dir
          targetPath: _artifacts/app_dir
        displayName: restore jupyterlab

      - script: ${{ parameters.activate }} python -m scripts.build conda
        displayName: build remaining packages

      - script: ${{ parameters.activate }} python -m scripts.build constructor
        displayName: build installer

      - script: conda install _artifacts/conda-bld/noarch/robotframework-jupyterlibrary-0.2.0-py_0.tar.bz2
        displayName: install built test tools

      - script: ${{ parameters.activate }} python -m scripts.test --headless
        displayName: acceptance tests

      - ${{ if eq(parameters.name, 'MacOSX') }}:
        - script: chmod -R 777 _artifacts
          displayName: fix artifact permissions

      - task: PublishTestResults@2
        displayName: publish test results
        inputs:
          testResultsFiles: _artifacts/test_output/**/*.xunit.xml
        condition: always()

      - task: PublishPipelineArtifact@0
        displayName: publish ${{ parameters.name }} robot output
        inputs:
          targetPath: _artifacts/test_output
          artifactName: Robot Output ${{ parameters.name }}
        condition: always()

      - task: PublishBuildArtifacts@1
        displayName: publish installer
        inputs:
          PathtoPublish: _artifacts/constructor
          ArtifactName: RobotLab for ${{ parameters.name }}
        condition: succeeded()
